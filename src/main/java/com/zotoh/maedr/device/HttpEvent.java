/*??
 * COPYRIGHT (C) 2008-2009 CHERIMOIA LLC. ALL RIGHTS RESERVED.
 *
 * THIS IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR
 * MODIFY IT UNDER THE TERMS OF THE APACHE LICENSE, 
 * VERSION 2.0 (THE "LICENSE").
 *
 * THIS LIBRARY IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *   
 * SEE THE LICENSE FOR THE SPECIFIC LANGUAGE GOVERNING PERMISSIONS 
 * AND LIMITATIONS UNDER THE LICENSE.
 *
 * You should have received a copy of the Apache License
 * along with this distribution; if not, you may obtain a copy of the 
 * License at 
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 ??*/
 
package com.zotoh.maedr.device;

import static com.zotoh.core.util.CoreUte.tstEStrArg;
import static com.zotoh.core.util.LangUte.MP;
import static com.zotoh.core.util.StrUte.isEmpty;
import static com.zotoh.core.util.StrUte.nsb;
import static java.util.Collections.unmodifiableMap;

import java.util.Map;

import com.zotoh.core.io.StreamData;
import com.zotoh.core.util.NCMap;
import com.zotoh.core.util.StrArr;
import com.zotoh.maedr.http.UriPathChain;

/**
 * An event generated by HTTP device(s).  In some cases, this acts
 * as the base class for other events generated by HTTP derived devices.
 *
 * @author kenl
 */
public class HttpEvent extends Event {
    
    private static final long serialVersionUID = 4177245480803037339L;
    
    private NCMap<String> _hdrs= new NCMap<String>();
    private Map<String,StrArr> _params= MP();
    private Map<String,Object> _attrs= MP();
    
    private String _servletPath="" ,
    _url="", _uri= "", _queryString="", _method= "";  
    
    private String _ctype="", _remoteAddr="", _remoteHost="" , 
    _localAddr="", _localHost="", _protocol="",
    _server="", _scheme="";
    
    private int _remotePort, _localPort, _serverPort;
    private boolean _ssl;
    
    private StreamData _data;
    private long _cLen;
    
    /**
     * @param c
     * @return
     */
    public boolean setUriChain(UriPathChain c) {
		return false;
    }
    
    /**
     * @param s
     */
    public void setData(StreamData s) {        _data=s;    }
    
    /**
     * @return
     */
    public StreamData getData() {        return _data;    }
    
    /**
     * @param dev
     */
    public HttpEvent(Device dev)    {
        super(dev);
    }
    
    /**
     * @param len
     */
    public void setContentLength(long len)    {        _cLen = len;    }
        
    /**
     * Get the <i>content-length</i>.
     * 
     * @return long.
     */
    public long getContentLength()    {               return _cLen;    
    }    

    /**
     * @param type
     */
    public void setContentType(String type)    {
        //tstEStrArg("content-type", type) ;
        _ctype = nsb(type); 
    }
    
    /**
     * @param n
     * @param v
     */
    public void addAttr(String n, Object v)    {
        if ( ! isEmpty(n)) {
            _attrs.put(n,v);
        }
    }
    
    /**
     * Get the <i>content-type</i> of the request.
     * 
     * @return String.
     */
    public String getContentType()        {               return _ctype;      }    
        
    /**
     * Get all the internet headers from the request.
     * 
     * @return immutable Map.
     */
    public Map<String,String> getHeaders()    {        
        return unmodifiableMap(_hdrs);    
    }    

    /**
     * Overwrites existing one if same.
     * 
     * @param hdr
     * @param value
     */
    public void setHeader(String hdr, String value)    {
        if ( !isEmpty(hdr))
        { _hdrs.put(hdr, nsb(value)); }
    }
        
    /**
     * Get the value for this header.
     * 
     * @param nm header string.
     * @return value or null.
     */
    public String getHeader(String nm)    {
        return nm==null ? null : _hdrs.get(nm);
    }

    /**
     * @param addr
     */
    public void setLocalAddr(String addr)    {        _localAddr= nsb(addr);    }
        
    /**
     * Get the <i>Local-Addr</i> from the request.
     * 
     * @return String.
     */
    public String getLocalAddr()    {                return _localAddr;       }

    /**
     * @param host
     */
    public void setLocalHost(String host)    {        _localHost= nsb(host);    }
    
    /**
     * Get the <i>Local Host</i> from the request.
     * 
     * @return String.
     */
    public String getLocalHost()        {               return _localHost;       }    

    /**
     * @param port
     */
    public void setLocalPort(int port)    {        _localPort= port;    }
    
    /**
     * Get the <i>Local Port</i> from the request.
     * 
     * @return int.
     */
    public int getLocalPort()    {               return _localPort;       }    

    /**
     * @param method
     */
    public void setMethod(String method)    {        _method= nsb(method);    }
    
    /**
     * Get the <i>Method</i> from the request.
     * 
     * @return String.
     */
    public String getMethod()    {              return _method;       }    

    /**
     * @return
     */
    public Map<String,StrArr> getParams()     {        
        return unmodifiableMap(_params);    
    }
    
    /**
     * @param p
     * @return
     */
    public StrArr getParam(String p) {
        return p==null ? null : _params.get(p) ;
    }
    
    /**
     * Get the set of <i>Attributes</i> from the request.
     * 
     * @return immutable Map.
     */
    public Map<String, Object> getAttrs()    {                return unmodifiableMap(_attrs);       }
        
    /**
     * @param p
     * @param values
     */
    public void addParam(String p, String[] values)    {
        if ( !isEmpty(p)) {
        	addParam(p, "");
        	if ( values != null) for (int i=0; i < values.length; ++i) {        
        		addParam(p, values[i]) ;
        	}        
    	}
    }
    
    /**
     * @param p
     * @param value
     */
    public void addParam(String p, String value)    {
        tstEStrArg("param-name", p) ;
        
        StrArr r= _params.get(p);
        value=nsb(value);
        
        if (r==null) {
            _params.put(p, r= new StrArr()) ;
        }
        
        if (!isEmpty(value))
        r.add(value) ;
    }
    
    /**
     * @param p
     */
    public void setProtocol(String p)    {        _protocol= nsb(p);    }
        
    /**
     * Get the <i>Protocol</i> from the request.
     * 
     * @return String.
     */
    public String getProtocol()    {               return _protocol;        }

    /**
     * @param q
     */
    public void setQueryString(String q)    {        _queryString= nsb(q);    }
        
    /**
     * Get the <i>Query String</i> from the request.
     * 
     * @return String.
     */
    public String getQueryString()    {               return _queryString;       }

    /**
     * @param addr
     */
    public void setRemoteAddr(String addr)    {        _remoteAddr= nsb(addr);    }
        
    /**
     * Get the <i>Remote Addr</i> from the request.
     * 
     * @return String.
     */
    public String getRemoteAddr()        {              return _remoteAddr;        }

    /**
     * @param host
     */
    public void setRemoteHost(String host)    {        _remoteHost= nsb(host);    }
        
    /**
     * Get the <i>Remote Host</i> from the request.
     * 
     * @return String.
     */
    public String getRemoteHost()       {               return _remoteHost;      }

    /**
     * @param port
     */
    public void setRemotePort(int port)   {        _remotePort= port;    }
        
    /**
     * Get the <i>Remote Port</i> from the request.
     * 
     * @return Integer
     */
    public int getRemotePort()    {               return _remotePort;       }
    
    /**
     * @param scheme
     */
    public void setScheme(String scheme)    {        _scheme= nsb(scheme);    }
        
    /**
     * Get the <i>Scheme</i> from the request.
     * 
     * @return String.
     */
    public String getScheme()     {                return _scheme;       }

    /**
     * @param server
     */
    public void setServer(String server)    {        _server= nsb(server);    }
        
    /**
     * Get the <i>Server</i> from the request.
     * 
     * @return String.
     */
    public String getServer()     {                return _server;       }

    /**
     * @param port
     */
    public void setServerPort(int port)    {        _serverPort= port;    }
        
    /**
     * Get the <i>Server Port</i> from the request.
     * 
     * @return Integer.
     */
    public int getServerPort()    {                return _serverPort;       }

    /**
     * @param path
     */
    public void setServletPath(String path)    {        _servletPath= path;    }
        
    /**
     * Get the <i>Servlet Path</i> from the request.
     * 
     * @return String.
     */
    public String getServletPath()       {              return _servletPath;       }

    /**
     * @param ssl
     */
    public void setSSL(boolean ssl)    {
        _ssl= ssl;
        setScheme(ssl ? "https" : "http") ;
    }
        
    /**
     * Check if the listener was SSL.
     * 
     * @return true if SSL.
     */
    public boolean isSSL()    {               return _ssl;       }

    /**
     * @param uri
     */
    public void setUri(String uri)    {        _uri= nsb(uri);    }
        
    /**
     * Get the <i>URI</i> from the request.
     * 
     * @return String.
     */
    public String getUri()        {               return _uri;        }

    /**
     * @param url
     */
    public void setUrl(String url)    {        _url= nsb(url);    }
            
    /**
     * Get the actual <i>URL</i> from the request.
     * 
     * @return
     */
    public String getUrl()    {                return _url;       }
    
    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        String ts, bf= ""
        + "servlet-path=" + _servletPath + ", " 
        + "url=" + _url + ", "
        + "uri=" + _uri + ", "
        + "queryString=" + _queryString + ", "
        + "method=" + _method + ", "
        + "ctype=" + _ctype + ", "
        + "clen=" + _cLen + ", "
        + "remote-addr=" + _remoteAddr + ", "
        + "remote-host=" + _remoteHost + ", "
        + "remote-port=" + _remotePort + ", "
        + "local-addr=" + _localAddr + ", "
        + "local-host=" + _localHost + ", "
        + "local-port=" + _localPort + ", "
        + "protocol=" + _protocol + ", "
        + "server=" + _server + ", "
        + "serverPort=" + _serverPort + ", "
        + "scheme=" + _scheme + ", "
        + "ssl=" + _ssl + "\n"
        + "data="
        + ( _data==null ? "null" : (_data.isDiskFile() ? _data.getFp() : "byte[]") )
        + "\n";
        
        ts="\n";        
        for (String s : _params.keySet()) {
            ts += s + "=[" + _params.get(s).toString() + "]";
        }        
        bf += "params=" + ts + "\n";
        
        ts="\n";
        for (String nm : _hdrs.keySet()) {
            ts += nm + ": " + _hdrs.get(nm) + "\n";
        }
        
        bf += "headers=" + ts + "\n";
        return bf;
    }
    
}

