/*??
 * COPYRIGHT (C) 2011 CHERIMOIA LLC. ALL RIGHTS RESERVED.
 *
 * THIS IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR
 * MODIFY IT UNDER THE TERMS OF THE APACHE LICENSE, 
 * VERSION 2.0 (THE "LICENSE").
 *
 * THIS LIBRARY IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *   
 * SEE THE LICENSE FOR THE SPECIFIC LANGUAGE GOVERNING PERMISSIONS 
 * AND LIMITATIONS UNDER THE LICENSE.
 *
 * You should have received a copy of the Apache License
 * along with this distribution; if not, you may obtain a copy of the 
 * License at 
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 ??*/
 
package com.zotoh.maedr.device.netty;

import java.io.IOException;

import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.ChannelBufferInputStream;
import org.jboss.netty.handler.codec.http.websocket.WebSocketFrame;

import com.zotoh.core.io.ByteOStream;
import com.zotoh.maedr.device.Device;
import com.zotoh.maedr.device.Event;

/**
 * Events generated by a WebSocket device.
 *
 * @author kenl
 */
public class WebSockEvent extends Event {

    private static final long serialVersionUID = 8224375822172669671L;
    private final WebSocketFrame _frame;
    private String _text;
    private byte[] _bits;
    
    /**
     * @param dev
     * @param frame
     */
    public WebSockEvent(Device dev, WebSocketFrame frame) {
        super(dev);
        _frame=frame;
    }
    
    /**
     * @return
     */
    public WebSocketFrame getFrame() { return _frame; }
        
    /**
     * @return
     */
    public boolean isBinary() {        return _frame.isBinary() ;    }
    
    
    /**
     * @return
     */
    public boolean isText() {        return _frame.isText() ;    }
        
    /**
     * @return
     */
    public String getText() {
        if (_text == null){            _text= _frame.getTextData();        }
        return _text;
    }
    
    /**
     * @return
     */
    public byte[] getBin() {
        if (_bits==null) {            _bits= getBits();        }
        return _bits;
    }
    
    private byte[] getBits() {
        ChannelBuffer buf= _frame.getBinaryData();
        ChannelBufferInputStream s= new ChannelBufferInputStream(buf);
        ByteOStream baos= new ByteOStream(4096);
        int c;
        byte[] bits= new byte[4096];
        try {
            while ((c=s.read(bits)) > 0) {                
                baos.write(bits, 0,c);
            }            
        }
        catch (IOException e) {
            tlog().error("",e);
        }
        return baos.asBytes();
    }
    
    
    
    
}
