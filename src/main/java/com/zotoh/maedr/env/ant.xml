<project name="maedr-runner" basedir="." default="release">

    <!-- DO NOT EDIT THIS FILE, IT IS MAINTAINED BY THE 
          FRAMEWORK 
    -->

    <property environment="env"/>	
	
    <property name="maedr.home" value="${env.MAEDR_HOME}" />
    <property name="app.dir" value="${basedir}/.." />
    <basename property="app.name" file="${app.dir}"/>

    <condition property="os.is.windows">
        <os name="windows"/>
    </condition>  
        
    <property name="webapps.dir" value="${app.dir}/webapps" />
    <property name="webinf.dir" value="${webapps.dir}/WEB-INF" />
    <property name="webz.dir" value="${webinf.dir}/classes" />
    <property name="webb.dir" value="${webinf.dir}/lib" />
    <property name="webx.dir" value="${webinf.dir}/web.xml" />
    <property name="tmp.dir" value="${app.dir}/tmp" />
    <property name="war.dir" value="${tmp.dir}/packj2eewar"/>
    <available file="${webz.dir}/../" 
        type="dir" 
        property="webinf.detected"/>

    <available file="${app.dir}/src/main/groovy"   type="dir"   property="src.groovy.detected"/>
    <available file="${app.dir}/src/main/scala"   type="dir"   property="src.scala.detected"/>
    <available file="${app.dir}/src/main/java"   type="dir"   property="src.java.detected"/>

    <property name="test.rpt.dir" value="${tmp.dir}/test-reports"/>
    <property name="test.cz.dir" value="${tmp.dir}/test-classes"/>
    <property name="cz.dir"  value="${app.dir}/classes" />

	<property name="my.guid" value="77c02546-8e96-4687-949f-9461ee6a21de"/>
    
    <path id="compile.classpath">
        <fileset dir="${app.dir}/lib">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${maedr.home}/thirdparty">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${maedr.home}/dist">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${maedr.home}/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="compile.test.classpath">
        <pathelement path="${test.cz.dir}"/>
        <pathelement path="${cz.dir}"/>
        <path refid="compile.classpath"/>
    </path>
    
    <taskdef name="groovyc"    classname="org.codehaus.groovy.ant.Groovyc"    classpathref="compile.classpath"/>
    
    <taskdef name="scalac"    classname="scala.tools.ant.Scalac"   classpathref="compile.classpath"/>
    
    <target name="release" depends="">
        <echo message="hello world"/>
    </target>

    <target name="clean-classes">
        <delete dir="${webz.dir}" quiet="true" failonerror="false"/>
        <delete dir="${cz.dir}" quiet="true" failonerror="false"/>
        <mkdir dir="${cz.dir}"/>
    </target>
    <target name="clean" depends="clean-classes">
    </target>

    <target name="compile-test-code" depends="compile-code">
        <delete dir="${test.rpt.dir}" quiet="true"/>
        <delete dir="${test.cz.dir}" quiet="true"/>
        <mkdir dir="${test.rpt.dir}"/>
        <mkdir dir="${test.cz.dir}"/>       
        <antcall target="ct-1"></antcall>       
        <antcall target="ct-2"></antcall>       
        <antcall target="ct-3"></antcall>       
    </target>

    <target name="compile-code" depends="clean-classes">
        <antcall target="cc-1"></antcall>       
        <antcall target="cc-2"></antcall>       
        <antcall target="cc-3"></antcall>       
    </target>
    
    <target name="cc-1" depends="" if="src.java.detected">
        <javac destdir="${cz.dir}" srcdir="${app.dir}/src/main/java" 
            includeAntRuntime="false" debug="on" debuglevel="lines,vars,source" >
            <classpath refid="compile.classpath"/>
        </javac>
        <copy todir="${cz.dir}">
            <fileset dir="${app.dir}/src/main/java">
              <exclude name="**/*.java"/>
                <exclude name="**/.svn"/>
                <exclude name="**/log4j.properties"/>               
            </fileset>
        </copy>     
    </target>
    <target name="ct-1" depends="" if="src.java.detected">
        <javac destdir="${test.cz.dir}" srcdir="${app.dir}/src/test/java" 
            includeAntRuntime="false" debug="on" debuglevel="lines,vars,source" >
            <classpath refid="compile.test.classpath"/>
        </javac>
        <copy todir="${test.cz.dir}">
            <fileset dir="${app.dir}/src/test/java">
                <exclude name="**/*.java"/>
                  <exclude name="**/.svn"/>
                  <exclude name="**/log4j.properties"/>               
            </fileset>
        </copy>     
    </target>

    <target name="cc-2" depends="" if="src.groovy.detected">
        <groovyc destdir="${cz.dir}" srcdir="${app.dir}/src/main/groovy" >
            <classpath refid="compile.classpath"/>
        </groovyc>
        <copy todir="${cz.dir}">
            <fileset dir="${app.dir}/src/main/groovy">
              <exclude name="**/*.groovy"/>
                  <exclude name="**/.svn"/>
                  <exclude name="**/log4j.properties"/>               
            </fileset>
        </copy>     
    </target>
    <target name="ct-2" depends="" if="src.groovy.detected">
        <groovyc destdir="${test.cz.dir}" srcdir="${app.dir}/src/test/groovy" >
            <classpath refid="compile.test.classpath"/>
        </groovyc>
        <copy todir="${test.cz.dir}">
            <fileset dir="${app.dir}/src/test/groovy">
                <exclude name="**/*.groovy"/>
                    <exclude name="**/.svn"/>
                    <exclude name="**/log4j.properties"/>               
            </fileset>
        </copy>     
    </target>

    <target name="cc-3" depends="" if="src.scala.detected">
        <scalac destdir="${cz.dir}" srcdir="${app.dir}/src/main/scala"  
            classpathref="compile.classpath">
            <include name="**/*.scala"/>
        </scalac>
        <copy todir="${cz.dir}">
            <fileset dir="${app.dir}/src/main/scala">
              <exclude name="**/*.scala"/>
                    <exclude name="**/.svn"/>
                    <exclude name="**/log4j.properties"/>               
            </fileset>
        </copy>     
    </target>
    <target name="ct-3" depends="" if="src.scala.detected">
        <scalac destdir="${test.cz.dir}" srcdir="${app.dir}/src/test/scala"  
            classpathref="compile.test.classpath">
            <include name="**/*.scala"/>
        </scalac>
        <copy todir="${test.cz.dir}">
            <fileset dir="${app.dir}/src/test/scala">
                <exclude name="**/*.scala"/>
                      <exclude name="**/.svn"/>
                      <exclude name="**/log4j.properties"/>               
            </fileset>
        </copy>     
    </target>
        
    <target name="jar" depends="">
        <jar destfile="${app.dir}/dist/${app.name}.jar" basedir="${cz.dir}"/>
    </target>

    <target name="pre-bundle" depends="">
        <mkdir dir="${maedr.useroutdir}/${my.guid}"/>
        <copy todir="${maedr.useroutdir}/${my.guid}">
            <fileset dir="${app.dir}">
                <exclude name="cfg/ant.xml"/>
                <exclude name="tmp/**"/>
            </fileset>
        </copy>
        <copy file="${app.dir}/tmp/ant.orig.xml" tofile="${maedr.useroutdir}/${my.guid}/cfg/ant.xml" overwrite="true"/>
        <mkdir dir="${maedr.useroutdir}/${my.guid}/tmp"/>
    </target>

    <target name="bundle-webapp-w32" depends="">
        <antcall target="pack-j2ee-war"/>
    </target>
    
    <target name="bundle-webapp-nix" depends="">
        <antcall target="pack-j2ee-war"/>
    </target>

    <target name="bundle-w32" depends="">
        <antcall target="pre-bundle"/>
        <zip destfile="${maedr.useroutdir}/${app.name}.zip" basedir="${maedr.useroutdir}/${my.guid}"/>
        <delete quiet="true" dir="${maedr.useroutdir}/${my.guid}"/>
    </target>
    
    <target name="bundle-nix" depends="">
        <antcall target="pre-bundle"/>
        <tar destfile="${maedr.useroutdir}/${app.name}.tar" basedir="${maedr.useroutdir}/${my.guid}" />
        <gzip destfile="${maedr.useroutdir}/${app.name}.tar.gz" src="${maedr.useroutdir}/${app.name}.tar" />
        <delete quiet="true" dir="${maedr.useroutdir}/${my.guid}"/>
    </target>
    
    <target name="packzip-app" depends="">
        <tar destfile="${tmp.dir}/${app.name}.tar"
            basedir="${app.dir}"
            excludes="${tmp.dir}">
        </tar>
        <delete file="${tmp.dir}/${app.name}.tar.gz"  quiet="true"/>
        <gzip destfile="${tmp.dir}/${app.name}.tar.gz" src="${tmp.dir}/${app.name}.tar" />
        <delete file="${tmp.dir}/${app.name}.tar" />
    </target>


    <target name="run-script-bg-nix" depends="">
        <exec executable="${maedr.home}/bin/maedr" dir="${app.dir}">
            <arg value="app"/>
            <arg value="run"/>
            <arg value="${maedr.scriptfile}"/>
            <arg value="/background"/>
        </exec>
    </target>

    <target name="run-script-bg-w32" depends="">
        <exec executable="cmd.exe" dir="${app.dir}">
            <arg value="/C"/>
            <arg value="start"/>
            <arg value="/B"/>
            <arg value="/MIN"/>
            <arg value="${maedr.home}/bin/maedr.bat"/>
            <arg value="app"/>
            <arg value="run"/>
            <arg value="${maedr.scriptfile}"/>
        </exec>
    </target>

    <target name="run-script" depends="">
       <java fork="false" clonevm="true" classname="com.zotoh.maedr.etc.AntStart">
        <arg value="-runscript"/>
         <arg value="${maedr.scriptfile}"/>
         <classpath>
            <pathelement path="${cz.dir}"/>
            <fileset dir="${app.dir}/lib">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${app.dir}/thirdparty">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${maedr.home}/dist">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${maedr.home}/lib">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${maedr.home}/thirdparty">
                <include name="**/*.jar"/>
            </fileset>
         </classpath>
       </java>
    </target>


    <target name="run-svc-bg-nix" depends="">
        <exec executable="${maedr.home}/bin/maedr" dir="${app.dir}">
            <arg value="app"/>
            <arg value="invoke"/>
            <arg value="${maedr.servicepoint}"/>
            <arg value="/background"/>
        </exec>
    </target>

    <target name="run-svc-bg-w32" depends="">
        <exec executable="cmd.exe" dir="${app.dir}">
            <arg value="/C"/>
            <arg value="start"/>
            <arg value="/B"/>
            <arg value="/MIN"/>
            <arg value="${maedr.home}/bin/maedr.bat"/>
            <arg value="app"/>
            <arg value="invoke"/>
            <arg value="${maedr.servicepoint}"/>
        </exec>
    </target>

    <target name="run-svc" depends="">
       <java fork="false" clonevm="true" classname="com.zotoh.maedr.etc.AntStart">
        <arg value="-invoke"/>
         <arg value="${maedr.servicepoint}"/>
         <classpath>
            <pathelement path="${cz.dir}"/>
            <fileset dir="${app.dir}/lib">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${app.dir}/thirdparty">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${maedr.home}/dist">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${maedr.home}/lib">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${maedr.home}/thirdparty">
                <include name="**/*.jar"/>
            </fileset>
         </classpath>
       </java>
    </target>

    
    
    <target name="run-app-bg-nix" depends="">
        <exec executable="${maedr.home}/bin/maedr" dir="${app.dir}">
            <arg value="app"/>
            <arg value="start"/>
            <arg value="/background"/>
        </exec>
    </target>

    <target name="run-app-bg-w32" depends="">
        <exec executable="cmd.exe" dir="${app.dir}">
            <arg value="/C"/>
            <arg value="start"/>
            <arg value="/B"/>
            <arg value="/MIN"/>
            <arg value="${maedr.home}/bin/maedr.bat"/>
            <arg value="app"/>
            <arg value="start"/>
        </exec>
    </target>
    
    <target name="run-app" depends="">
       <java fork="false" clonevm="true" classname="com.zotoh.maedr.etc.AntStart">
         <classpath>
            <pathelement path="${cz.dir}"/>
            <fileset dir="${app.dir}/lib">
                <include name="**/*.jar"/>
            </fileset>
                <fileset dir="${app.dir}/thirdparty">
                    <include name="**/*.jar"/>
                </fileset>
            <fileset dir="${maedr.home}/dist">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${maedr.home}/lib">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${maedr.home}/thirdparty">
                <include name="**/*.jar"/>
            </fileset>
         </classpath>
       </java>
    </target>

    <target name="run-dbg-app-w32" depends="">
        <exec executable="${maedr.home}/bin/maedr.bat" dir="${app.dir}">
            <arg value="remote-debug"/>
            <arg value="maedr-server"/>
        </exec>
    </target>
    
    <target name="run-dbg-app-nix" depends="">
        <exec executable="${maedr.home}/bin/maedr" dir="${app.dir}">
            <arg value="remote-debug"/>
            <arg value="maedr-server"/>
        </exec>
    </target>
            
    <target name="pack-j2ee-war" if="webinf.detected" depends="jar">
        <copy todir="${maedr.useroutdir}/webapps/.vault">
            <fileset dir="${app.dir}/.vault"></fileset>
        </copy>
        <copy todir="${maedr.useroutdir}/webapps/cfg">
            <fileset dir="${app.dir}/cfg">
                <exclude name="app.properties"/>
                <exclude name="app.conf"/>
            </fileset>
        </copy>
        <copy file="${app.dir}/tmp/ant.orig.xml" tofile="${maedr.useroutdir}/webapps/cfg/ant.xml"/>
        <copy todir="${maedr.useroutdir}/webapps">
            <fileset dir="${webapps.dir}"></fileset>
        </copy>
        <copy file="${maedr.useroutdir}/webapps/tmp/web.xml" todir="${maedr.useroutdir}/webapps/WEB-INF"/>
        <copy todir="${maedr.useroutdir}/webapps/WEB-INF/lib">
            <fileset dir="${maedr.home}/dist"></fileset>
            <fileset dir="${maedr.home}/lib">
                <exclude name="servlet-api-*.jar"/>
                <exclude name="dasein-*.jar"/>
                <exclude name="*.zip"/>
            </fileset>
            <fileset dir="${app.dir}/thirdparty"></fileset>
            <fileset dir="${app.dir}/lib"></fileset>
            <fileset dir="${app.dir}/dist"></fileset>
        </copy>
        <jar destfile="${maedr.useroutdir}/${app.name}.war">
            <fileset dir="${maedr.useroutdir}/webapps"></fileset>
        </jar>
        <delete quiet="true" dir="${maedr.useroutdir}/webapps"/>
    </target>

    <target name="test-code" depends="compile-test-code">
        <junit logfailedtests="true" showoutput="false" printsummary="yes" fork="yes" haltonfailure="yes" >
            <classpath refid="compile.test.classpath"/>   
            <batchtest todir="${test.rpt.dir}" >
                <fileset dir="${test.cz.dir}">
                    <include name="**/Test*.*"/>
                </fileset>  
                <formatter type="plain" usefile="false"/>
            </batchtest>
        </junit>    
    </target>
    
</project>


